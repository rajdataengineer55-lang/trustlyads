rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin custom claim
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
      // Anyone can read an offer and its subcollections
      allow read;
      
      // Only an admin can create, update, or delete an offer
      allow write: if isAdmin();

      // Rules for the 'reviews' subcollection
      match /reviews/{reviewId} {
        // Anyone can read reviews
        allow read;
        // Only authenticated users can create a review
        allow create: if request.auth != null;
        // No one can update or delete reviews
        allow update, delete: if false;
      }
      
      // Rules for the 'stories' subcollection
      match /stories/{storyId} {
        // Anyone can read a story
        allow read;
        // Only an admin can create a story
        allow create: if isAdmin();
        // No one can update or delete stories
        allow update, delete: if false;
      }
    }
    
    // Rules for the 'followers' collection
    match /followers/{userId} {
        // Anyone can read follower documents (for public counts)
        allow read;
        // A user can only write to their own follower document
        allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for the 'meta' collection (used for aggregated stats)
    match /meta/stats {
      // Allow public read for follower count
      allow get;
      // Disallow all writes from the client
      allow write: if false;
    }
    
    // Rules for the 'users' collection (for role management)
    match /users/{userId} {
        // Only admins can read the full user list
        allow read: if isAdmin();
        // Only an admin can change a user's role
        allow write: if isAdmin();
    }
  }
}
