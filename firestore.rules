rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin custom claim
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
      // Allow reading a document if it's not hidden, or if the user is an admin.
      allow get: if resource.data.isHidden == false || isAdmin();
      
      // Allow listing documents that are not hidden. The client-side query must include this filter.
      allow list: if true;

      // Only admins can create, update, or delete offers.
      allow write: if isAdmin();

      // Rules for the 'reviews' subcollection
      match /reviews/{reviewId} {
        // Anyone who can see the offer can read the reviews.
        allow read: if get(/databases/$(database)/documents/offers/$(offerId)).data.isHidden == false || isAdmin();
        
        // Any authenticated user can create a review.
        allow create: if request.auth != null;

        // Nobody can update or delete a review to maintain integrity.
        allow update, delete: if false;
      }
    }

    // Rules for the 'followers' collection
    match /followers/{userId} {
      // Anyone can see who is a follower (e.g., for a public count).
      allow read: if true;
      
      // A user can only follow/unfollow for themselves.
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'stories' collection
    match /stories/{storyId} {
      // All stories are public to read.
      allow read: if true;
      
      // Only admins can create or delete stories.
      allow write: if isAdmin();
    }
    
    // Explicitly deny all other access to prevent unintended open paths.
    match /{path=**} {
        allow read, write: if false;
    }
  }
}
