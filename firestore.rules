
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Check if a user is an authenticated admin
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Check if a user is any authenticated user
    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
      // Anyone can read an offer
      allow read;
      
      // Only an admin can create, update, or delete an offer
      allow create, update, delete: if isAdmin();
      
      // Rules for the 'reviews' subcollection
      match /reviews/{reviewId} {
        // Anyone can read reviews
        allow read;
        // Only a signed-in user can create a review
        allow create: if isSignedIn();
      }

      // Rules for the 'stories' subcollection
      match /stories/{storyId} {
        // Anyone can read a story
        allow read;
        // Only an admin can create a story
        allow create: if isAdmin();
      }
    }

    // Rules for the 'followers' collection
    match /followers/{userId} {
        // A user can only manage their own follower document
        allow read, create, delete: if isSignedIn() && request.auth.uid == userId;
    }
    
    // Rules for the 'meta' collection (for follower count)
    match /meta/stats {
      // Anyone can read the stats document
      allow read;
      // No one can write to it directly from the client
      allow write: if false;
    }

    // Rules for the 'users' collection (for role management)
    match /users/{userId} {
      // Anyone can read the public user roles
      allow read;
      // Only an admin can update user roles
      allow update: if isAdmin();
      // No one can create or delete user documents directly
      allow create, delete: if false;
    }
  }
}
