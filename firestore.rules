
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // OFFERS
    match /offers/{offerId} {
      // READ: Anyone can get a single offer. List is more complex.
      // Admins can list everything.
      // Users can list only non-hidden offers.
      allow get: if true;
      allow list: if isAdmin() || request.query.where.isHidden == false;

      // WRITE: Only admins can create, update, or delete offers.
      // We allow authenticated users to update 'views' and 'clicks' via increment.
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'clicks']));
      
      // REVIEWS SUBCOLLECTION
      match /reviews/{reviewId} {
        // READ: Anyone can read reviews.
        allow get, list: if true;
        // WRITE: Authenticated users can create reviews. Only admins can update/delete.
        allow create: if isAuthenticated();
        allow update, delete: if isAdmin();
      }
    }

    // STORIES
    // Stories are temporary and linked to offers.
    match /stories/{storyId} {
      // READ: Anyone can read stories (needed for viewer).
      // Listing is restricted to recent stories (handled by query in code, secured by read rule).
      allow get, list: if true;
      // CREATE: Only admins can create stories.
      allow create: if isAdmin();
      // UPDATE: Any authenticated user can update ONLY the 'views' count.
      allow update: if isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']);
      // DELETE: No one can delete stories; they expire automatically via TTL.
      allow delete: if false;
    }

    // FOLLOWERS
    // Document ID is the user's UID.
    match /followers/{userId} {
        // READ: Publicly readable to get total count.
        allow get, list: if true;
        // WRITE: Only the owner of the document can create or delete their follow status.
        allow create, delete: if isOwner(userId);
    }
  }
}
