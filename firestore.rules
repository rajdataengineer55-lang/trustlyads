rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin custom claim
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
      // Allow anyone to read offers (get, list)
      allow get, list;
      
      // Only allow admins to write (create, update, delete)
      allow write: if isAdmin();

      // Rules for the 'reviews' subcollection
      match /reviews/{reviewId} {
        // Anyone can read reviews
        allow get, list;
        // Only authenticated users can create reviews
        allow create: if request.auth != null;
        // Only admins can delete reviews
        allow delete: if isAdmin();
      }

      // Rules for the 'stories' subcollection
      match /stories/{storyId} {
         // Anyone can read stories
        allow get, list;
        // Only admins can create, update, or delete stories
        allow write: if isAdmin();
      }
    }

    // Rules for the 'followers' collection
    match /followers/{userId} {
       // Anyone can read the list of followers (for the count)
       allow list;
       // A user can read their own follower document
       allow get: if request.auth != null && request.auth.uid == userId;
       // A user can create/delete their own follower document
       allow create, delete: if request.auth != null && request.auth.uid == userId;
       // Admins can do anything
       allow write: if isAdmin();
    }
    
    // Rules for the 'meta' collection which stores aggregated stats
    match /meta/{docId} {
      // Allow anyone to read documents in the meta collection (e.g., followerCount)
      allow get, list;
      // Disallow any client-side writes
      allow write: if false;
    }
    
    // Admins can read and write to the 'admins' collection
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }
  }
}
