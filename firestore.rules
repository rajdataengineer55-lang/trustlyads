rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin custom claim
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
      // Anyone can read non-hidden offers
      allow read: if resource.data.isHidden == false;
      // Admins can read any offer
      allow get: if isAdmin();

      // Only admins can create or delete offers
      allow create, delete: if isAdmin();

      // Admins can update any field
      // Any user can update ONLY the views and clicks fields
      allow update: if isAdmin() ||
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'clicks']));
    }

    // Rules for the 'stories' collection
    match /stories/{storyId} {
      // Anyone can read stories
      allow read: if true;
      // Only admins can create, update, or delete stories
      allow write: if isAdmin();
    }

    // Rules for the 'followers' collection
    match /followers/{userId} {
      // Anyone can read the followers count (implicitly allowed by public query)
      allow read: if true;
      // Only the authenticated user can follow/unfollow themselves
      allow write: if request.auth.uid == userId;
    }
    
    // Rules for the 'onboardedUsers' collection
    match /onboardedUsers/{userId} {
        // Only admins can perform any action on these records.
        // Explicitly granting all permissions for clarity.
        allow get, list: if isAdmin();
        allow create, update, delete: if isAdmin();
    }
  }
}
