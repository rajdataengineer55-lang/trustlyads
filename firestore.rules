rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin custom claim
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
      // READ: Public can get a single offer if it's not hidden. Admins can get any.
      allow get: if resource.data.isHidden == false || isAdmin();
      
      // READ: Public can list offers. The client-side code is responsible for
      // filtering out hidden offers for non-admin users.
      allow list: if true;

      // WRITE: Only admins can create, update, or delete offers.
      allow write: if isAdmin();

      // Rules for the 'reviews' subcollection
      match /reviews/{reviewId} {
        // READ: Anyone who can view the parent offer can read its reviews.
        allow read: if get(/databases/$(database)/documents/offers/$(offerId)).data.isHidden == false || isAdmin();
        
        // WRITE: Only authenticated users can create reviews.
        allow create: if request.auth != null;
        
        // Reviews are immutable; they cannot be updated or deleted.
        allow update, delete: if false;
      }
    }

    // Rules for the 'followers' collection
    match /followers/{userId} {
      // READ: Publicly readable to get follower counts.
      allow read: if true;
      
      // WRITE: Users can only manage their own follow status.
      allow create, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'stories' collection
    match /stories/{storyId} {
      // READ: All stories are public.
      allow read: if true;
      
      // WRITE: Only admins can create or delete stories.
      allow write: if isAdmin();
    }
  }
}
