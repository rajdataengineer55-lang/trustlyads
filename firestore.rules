rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
      // Anyone can read (get, list) offers
      allow read: if true;
      // Only admins can create, update, or delete offers
      allow write: if isAdmin();
      
      // Rules for the 'reviews' subcollection
      match /reviews/{reviewId} {
        // Anyone can read reviews
        allow read: if true;
        // Only authenticated users can create reviews
        allow create: if isAuthenticated();
        // Users cannot update or delete reviews
        allow update, delete: if false;
      }
      
      // Rules for the 'stories' subcollection
      match /stories/{storyId} {
        // Anyone can read stories
        allow read: if true;
        // Only admins can create stories
        allow create: if isAdmin();
        // No one can update or delete stories
        allow update, delete: if false;
      }
    }

    // Rules for the 'followers' collection
    match /followers/{userId} {
      // Only the authenticated user can manage their own follower status
      allow read, write: if isOwner(userId);
    }
    
    // Rules for metadata, like the follower count
    match /meta/{docId} {
        // Anyone can read the stats document for the follower count
        allow get: if docId == "stats";
        // No one can write to it from the client side
        allow write: if false;
    }
    
    // Rules for the 'users' collection (for roles)
    match /users/{userId} {
        // Anyone can create their own user document on signup
        allow create: if isOwner(userId);
        // Users can read their own document
        allow read: if isOwner(userId);
        // Only admins can update user documents (to change roles)
        allow update: if isAdmin();
        // No one can delete user documents from the client
        allow delete: if false;
    }
    
    // Catch-all rule for any other path not defined
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
