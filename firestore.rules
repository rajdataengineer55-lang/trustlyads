rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin custom claim
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Rules for the 'offers' collection
    match /offers/{offerId} {
      // Allow public read access for individual offers if they are not hidden.
      // Admins can read any offer, regardless of visibility.
      allow get: if resource.data.isHidden == false || isAdmin();
      
      // Allow public listing of offers. The client will filter for isHidden == false.
      // Admins can list all offers.
      allow list: if true;

      // Only admins can create, update, or delete offers.
      allow write: if isAdmin();

      // Rules for the nested 'reviews' subcollection
      match /reviews/{reviewId} {
        // Anyone who can see the offer can read its reviews.
        allow read: if get(/databases/$(database)/documents/offers/$(offerId)).data.isHidden == false || isAdmin();
        
        // Only authenticated users can create reviews.
        allow create: if request.auth != null;

        // Nobody can update or delete reviews.
        allow update, delete: if false;
      }
    }

    // Rules for the 'followers' collection
    match /followers/{userId} {
      // Anyone can read follower documents (e.g., to get a count).
      allow read: if true;
      
      // A user can only create or delete their own follower document.
      allow create, delete: if request.auth != null && request.auth.uid == userId;
      allow update: if false; // Followers cannot be updated.
    }

    // Rules for the 'stories' collection
    match /stories/{storyId} {
      // Stories are public and can be read by anyone.
      allow read: if true;
      
      // Only admins can create or delete stories.
      allow write: if isAdmin();
    }
    
    // Explicitly deny access to all other paths for security.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
